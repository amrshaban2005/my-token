{"ast":null,"code":"var _jsxFileName = \"C:\\\\blockchain\\\\ethereum\\\\projects\\\\my-token\\\\client\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport getWeb3 from '../ethereum/getWeb3';\nimport MyToken from \"../ethereum/build/MyToken.json\";\nimport MyTokenSale from \"../ethereum/build/MyTokenSale.json\";\nimport { Button, Form, Input, Container } from 'semantic-ui-react';\nimport Head from 'next/head';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      web3: null,\n      accounts: null,\n      mytokenInstance: null,\n      mytokenSaleInstance: null,\n      tokenPrice: 0,\n      tokenBalance: 0\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = MyToken.networks[networkId];\n        const mytokenInstance = new web3.eth.Contract(MyToken.abi, deployedNetwork && deployedNetwork.address);\n        const mytokenSaleInstance = new web3.eth.Contract(MyTokenSale.abi, deployedNetwork && deployedNetwork.address);\n        this.setState({\n          web3,\n          accounts,\n          mytokenInstance: mytokenInstance,\n          mytokenSaleInstance: mytokenSaleInstance\n        }, this.loadData);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"loadData\", async () => {\n      try {\n        const {\n          mytokenInstance,\n          mytokenSaleInstance,\n          accounts\n        } = this.state;\n        let tokenPrice = await mytokenSaleInstance.methods.tokenPrice().call();\n        let tokenBalance = await mytokenInstance.balanceOf(accounts[0]).call();\n        this.setState({\n          tokenPrice: tokenPrice,\n          tokenBalance: tokenPrice\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, \"My Token ICO SALE\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"price is \", this.state.tokenPrice), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"balance is \", this.state.tokenBalance));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/blockchain/ethereum/projects/my-token/client/pages/index.js"],"names":["React","Component","getWeb3","MyToken","MyTokenSale","Button","Form","Input","Container","Head","Home","web3","accounts","mytokenInstance","mytokenSaleInstance","tokenPrice","tokenBalance","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","Contract","abi","address","setState","loadData","error","console","log","state","methods","call","balanceOf","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,SAA9B,QAA+C,mBAA/C;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAGA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAAA;AAAA;;AAAA,mCAEnB;AACNU,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,QAAQ,EAAE,IAFJ;AAGNC,MAAAA,eAAe,EAAE,IAHX;AAINC,MAAAA,mBAAmB,EAAE,IAJf;AAKNC,MAAAA,UAAU,EAAE,CALN;AAMNC,MAAAA,YAAY,EAAE;AANR,KAFmB;;AAAA,+CAWP,YAAY;AAC9B,UAAI;AACF,cAAML,IAAI,GAAG,MAAMT,OAAO,EAA1B;AACA,cAAMU,QAAQ,GAAG,MAAMD,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMC,SAAS,GAAG,MAAMR,IAAI,CAACM,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AAEA,cAAMC,eAAe,GAAGnB,OAAO,CAACoB,QAAR,CAAiBJ,SAAjB,CAAxB;AAEA,cAAMN,eAAe,GAAG,IAAIF,IAAI,CAACM,GAAL,CAASO,QAAb,CAAsBrB,OAAO,CAACsB,GAA9B,EACtBH,eAAe,IAAIA,eAAe,CAACI,OADb,CAAxB;AAGA,cAAMZ,mBAAmB,GAAG,IAAIH,IAAI,CAACM,GAAL,CAASO,QAAb,CAAsBpB,WAAW,CAACqB,GAAlC,EAC1BH,eAAe,IAAIA,eAAe,CAACI,OADT,CAA5B;AAKA,aAAKC,QAAL,CAAc;AAAEhB,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,eAAe,EAAEA,eAAnC;AAAoDC,UAAAA,mBAAmB,EAAEA;AAAzE,SAAd,EAA8G,KAAKc,QAAnH;AACD,OAhBD,CAiBA,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAhC0B;;AAAA,sCAkChB,YAAY;AACrB,UAAI;AACF,cAAM;AAAEhB,UAAAA,eAAF;AAAmBC,UAAAA,mBAAnB;AAAwCF,UAAAA;AAAxC,YAAqD,KAAKoB,KAAhE;AAGA,YAAIjB,UAAU,GAAG,MAAMD,mBAAmB,CAACmB,OAApB,CAA4BlB,UAA5B,GAAyCmB,IAAzC,EAAvB;AACA,YAAIlB,YAAY,GAAG,MAAMH,eAAe,CAACsB,SAAhB,CAA0BvB,QAAQ,CAAC,CAAD,CAAlC,EAAuCsB,IAAvC,EAAzB;AAEA,aAAKP,QAAL,CAAc;AAAEZ,UAAAA,UAAU,EAAEA,UAAd;AAAyBC,UAAAA,YAAY,EAACD;AAAtC,SAAd;AACD,OARD,CAQE,OAAOc,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KA9C0B;AAAA;;AAgD3BO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc,KAAKJ,KAAL,CAAWjB,UAAzB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgB,KAAKiB,KAAL,CAAWhB,YAA3B,CAHF,CADF;AAOD;;AAxD0B;;AA2D7B,eAAeN,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport getWeb3 from '../ethereum/getWeb3';\nimport MyToken from \"../ethereum/build/MyToken.json\";\nimport MyTokenSale from \"../ethereum/build/MyTokenSale.json\";\nimport { Button, Form, Input, Container } from 'semantic-ui-react';\nimport Head from 'next/head';\n\n\nclass Home extends Component {\n\n  state = {\n    web3: null,\n    accounts: null,\n    mytokenInstance: null,\n    mytokenSaleInstance: null,\n    tokenPrice: 0,\n    tokenBalance: 0\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n\n      const deployedNetwork = MyToken.networks[networkId];\n\n      const mytokenInstance = new web3.eth.Contract(MyToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const mytokenSaleInstance = new web3.eth.Contract(MyTokenSale.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      this.setState({ web3, accounts, mytokenInstance: mytokenInstance, mytokenSaleInstance: mytokenSaleInstance }, this.loadData);\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  loadData = async () => {\n    try {\n      const { mytokenInstance, mytokenSaleInstance, accounts } = this.state;\n\n\n      let tokenPrice = await mytokenSaleInstance.methods.tokenPrice().call();\n      let tokenBalance = await mytokenInstance.balanceOf(accounts[0]).call();\n\n      this.setState({ tokenPrice: tokenPrice,tokenBalance:tokenPrice });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>My Token ICO SALE</h1>\n        <h2>price is {this.state.tokenPrice}</h2>\n        <h2>balance is {this.state.tokenBalance}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}