{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport getWeb3 from '../ethereum/getWeb3';\nimport MyToken from \"../ethereum/build/MyToken.json\";\nimport MyTokenSale from \"../ethereum/build/MyTokenSale.json\";\nimport { Button, Form, Input, Message, FormField } from 'semantic-ui-react';\nimport Layout from '../components/layout';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      web3: null,\n      accounts: null,\n      account: null,\n      mytokenInstance: null,\n      mytokenSaleInstance: null,\n      tokenPrice: 0,\n      tokenBalance: 0,\n      numberofToken: 1,\n      tokenSold: 0,\n      tokenAvaliable: 750000,\n      errorMessage: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork1 = MyToken.networks[networkId];\n        const deployedNetwork2 = MyTokenSale.networks[networkId];\n        const mytokenInstance = new web3.eth.Contract(MyToken.abi, deployedNetwork1 && deployedNetwork1.address);\n        const mytokenSaleInstance = new web3.eth.Contract(MyTokenSale.abi, deployedNetwork2 && deployedNetwork2.address);\n        this.setState({\n          web3,\n          accounts,\n          mytokenInstance,\n          mytokenSaleInstance\n        }, this.loadData);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"loadData\", async () => {\n      try {\n        const {\n          mytokenInstance,\n          mytokenSaleInstance,\n          web3\n        } = this.state;\n        let account = await web3.eth.getCoinbase();\n        let tokenPrice = await mytokenSaleInstance.methods.tokenPrice().call();\n        let tokenBalance = await mytokenInstance.methods.balanceOf(account).call();\n        let tokenSold = await mytokenSaleInstance.methods.tokenSold().call();\n        this.setState({\n          tokenPrice,\n          tokenBalance,\n          account,\n          tokenSold\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      this.setState({\n        errorMessage: '',\n        loading: true\n      });\n      event.preventDefault();\n\n      try {\n        const {\n          mytokenSaleInstance,\n          account\n        } = this.state;\n        await mytokenSaleInstance.methods.buyTokens(this.state.numberofToken).send({\n          from: account,\n          value: this.state.tokenPrice * this.state.numberofToken\n        });\n        this.setState({\n          numberofToken: 1\n        });\n        this.loadData();\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const web3 = this.state.web3;\n\n    if (!web3) {\n      return __jsx(\"div\", null, \"Loading Web3, accounts, and contract...\");\n    }\n\n    const tokenPrice = web3.utils.fromWei(this.state.tokenPrice.toString(), 'ether');\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(\"div\", null, __jsx(\"h1\", null, \"My Token ICO SALE\"), __jsx(\"hr\", null), __jsx(\"br\", null)), __jsx(\"div\", null, __jsx(\"p\", null, \"Introducing \\\"My Token\\\" (DAPP)! Token price is  \", tokenPrice, \" Ether. You Currently have \", this.state.tokenBalance, \" MyToken \"), __jsx(\"br\", null), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      focus: true,\n      value: this.state.numberofToken,\n      onChange: event => this.setState({\n        numberofToken: event.target.value\n      })\n    })), __jsx(Button, {\n      primary: true,\n      loading: this.state.loading\n    }, \"Buy Tokens\"), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    })), __jsx(\"br\", null), __jsx(\"p\", null, this.state.tokenSold, \" / \", this.state.tokenAvaliable, \" Tokens sold\"), __jsx(\"hr\", null), __jsx(\"p\", null, \"Your Account: \", this.state.account))));\n  }\n\n}\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}