{"ast":null,"code":"var _jsxFileName = \"C:\\\\blockchain\\\\ethereum\\\\projects\\\\my-token\\\\client\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport getWeb3 from '../ethereum/getWeb3';\nimport MyToken from \"../ethereum/build/MyToken.json\";\nimport MyTokenSale from \"../ethereum/build/MyTokenSale.json\";\nimport { Button, Form, Input } from 'semantic-ui-react';\nimport Layout from '../components/layout';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      web3: null,\n      accounts: null,\n      account: null,\n      mytokenInstance: null,\n      mytokenSaleInstance: null,\n      tokenPrice: 0,\n      tokenBalance: 0,\n      numberofToken: 0\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork1 = MyToken.networks[networkId];\n        const deployedNetwork2 = MyTokenSale.networks[networkId];\n        const mytokenInstance = new web3.eth.Contract(MyToken.abi, deployedNetwork1 && deployedNetwork1.address);\n        const mytokenSaleInstance = new web3.eth.Contract(MyTokenSale.abi, deployedNetwork2 && deployedNetwork2.address);\n        this.setState({\n          web3,\n          accounts,\n          mytokenInstance,\n          mytokenSaleInstance\n        }, this.loadData);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"loadData\", async () => {\n      try {\n        const {\n          mytokenInstance,\n          mytokenSaleInstance,\n          web3\n        } = this.state;\n        let account = await web3.eth.getCoinbase();\n        let tokenPrice = await mytokenSaleInstance.methods.tokenPrice().call();\n        let tokenBalance = await mytokenInstance.methods.balanceOf(account).call();\n        this.setState({\n          tokenPrice: tokenPrice,\n          tokenBalance: tokenBalance,\n          account\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      //const tokenPrice = 1000000000000000\n      const {\n        mytokenSaleInstance,\n        account\n      } = this.state;\n      await mytokenSaleInstance.methods.buyTokens(this.state.numberofToken).send({\n        from: account,\n        value: this.state.tokenPrice * this.state.numberofToken\n      });\n    });\n  }\n\n  render() {\n    const web3 = this.state.web3;\n\n    if (!web3) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 14\n        }\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    const tokenPrice = web3.utils.fromWei(this.state.tokenPrice.toString(), 'ether');\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"My Token ICO SALE\"), __jsx(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"Introducing \\\"My Token\\\" (DAPP)! Token price is  \", tokenPrice, \" Ether. You Currently have \", this.state.tokenBalance, \" MyToken \"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      focus: true,\n      value: this.state.numberofToken,\n      onChange: event => this.setState({\n        numberofToken: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, \"Enter\")), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"tokens sold\"), __jsx(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Your Account: \", this.state.account))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/blockchain/ethereum/projects/my-token/client/pages/index.js"],"names":["React","Component","getWeb3","MyToken","MyTokenSale","Button","Form","Input","Layout","Home","web3","accounts","account","mytokenInstance","mytokenSaleInstance","tokenPrice","tokenBalance","numberofToken","eth","getAccounts","networkId","net","getId","deployedNetwork1","networks","deployedNetwork2","Contract","abi","address","setState","loadData","error","console","log","state","getCoinbase","methods","call","balanceOf","buyTokens","send","from","value","render","utils","fromWei","toString","onSubmit","event","target"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getWeb3 from '../ethereum/getWeb3';\nimport MyToken from \"../ethereum/build/MyToken.json\";\nimport MyTokenSale from \"../ethereum/build/MyTokenSale.json\";\nimport { Button, Form, Input } from 'semantic-ui-react';\nimport Layout from '../components/layout';\n\n\n\nclass Home extends Component {\n\n  state = {\n    web3: null,\n    accounts: null,\n    account: null,\n    mytokenInstance: null,\n    mytokenSaleInstance: null,\n    tokenPrice: 0,\n    tokenBalance: 0,\n    numberofToken: 0\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n\n      const deployedNetwork1 = MyToken.networks[networkId];\n      const deployedNetwork2 = MyTokenSale.networks[networkId];\n\n      const mytokenInstance = new web3.eth.Contract(MyToken.abi,\n        deployedNetwork1 && deployedNetwork1.address,\n      );\n      const mytokenSaleInstance = new web3.eth.Contract(MyTokenSale.abi,\n        deployedNetwork2 && deployedNetwork2.address,\n      );\n\n\n      this.setState({ web3, accounts,  mytokenInstance,  mytokenSaleInstance }, this.loadData);\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  loadData = async () => {\n    try {\n      const { mytokenInstance, mytokenSaleInstance, web3 } = this.state;\n      let account = await web3.eth.getCoinbase();\n\n      let tokenPrice = await mytokenSaleInstance.methods.tokenPrice().call();\n\n\n\n      let tokenBalance = await mytokenInstance.methods.balanceOf(account).call();\n\n      this.setState({ tokenPrice: tokenPrice, tokenBalance: tokenBalance, account });\n    } catch (error) {\n\n      console.log(error);\n    }\n  }\n\n  onSubmit = async () => {\n    //const tokenPrice = 1000000000000000\n    const { mytokenSaleInstance, account } = this.state;\n    await mytokenSaleInstance.methods.buyTokens(this.state.numberofToken).send({ from: account, value: this.state.tokenPrice * this.state.numberofToken });\n\n  }\n\n  render() {\n    const web3 = this.state.web3;\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    const tokenPrice = web3.utils.fromWei(this.state.tokenPrice.toString(), 'ether');\n    return (\n      <Layout>\n        <div >\n          <div >\n            <h1 >My Token ICO SALE</h1>\n            <hr />\n            <br />\n          </div>\n          <div >\n            <p>Introducing \"My Token\" (DAPP)! Token price is  {tokenPrice} Ether.\n           You Currently have {this.state.tokenBalance} MyToken </p>\n            <br />\n\n            <Form onSubmit={this.onSubmit}>\n\n\n              <Input focus\n                value={this.state.numberofToken}\n                onChange={event => this.setState({ numberofToken: event.target.value })}\n              />\n\n              <Button primary>Enter</Button>\n            </Form>\n            <br />\n            <p>tokens sold</p>\n            <hr />\n            <p>Your Account: {this.state.account}</p>\n          </div>\n        </div>\n\n      </Layout>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}